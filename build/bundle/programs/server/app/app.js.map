{"version":3,"sources":["meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,QAAQ,IAAI,MAAM,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAI,OAAO,QAAX,EAAqB;;;AAGnB,SAAO,OAAP,CAAe,OAAf,EAAwB,SAAS,gBAAT,GAA4B;AAClD,WAAO,MAAM,IAAN,CAAW;AAChB,WAAK,CACH,EAAE,WAAS,EAAE,KAAK,IAAP,EAAX,EADG,EAEH,EAAE,OAAO,KAAK,MAAd,EAFG;AADW,KAAX,CAAP;AAMD,GAPD;AAQD;;AAED,OAAO,OAAP,CAAe;AACb,gBADa,uBACE,IADF,EACQ;AACnB,UAAM,IAAN,EAAY,MAAZ;;;AAGA,QAAI,CAAE,KAAK,MAAX,EAAmB;AACjB,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa;AACX,gBADW;AAEX,iBAAW,IAAI,IAAJ,EAFA;AAGX,aAAO,KAAK,MAHD;AAIX,gBAAU,OAAO,KAAP,CAAa,OAAb,CAAqB,KAAK,MAA1B,EAAkC;AAJjC,KAAb;AAMD,GAfY;AAgBb,gBAhBa,uBAgBE,MAhBF,EAgBU;AACrB,UAAM,MAAN,EAAc,MAAd;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,QAAI,mBAAgB,KAAK,KAAL,KAAe,KAAK,MAAxC,EAAgD;;AAE9C,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb;AACD,GA1BY;AA2Bb,oBA3Ba,2BA2BM,MA3BN,EA2Bc,UA3Bd,EA2B0B;AACrC,UAAM,MAAN,EAAc,MAAd;AACA,UAAM,UAAN,EAAkB,OAAlB;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,QAAI,mBAAgB,KAAK,KAAL,KAAe,KAAK,MAAxC,EAAgD;;AAE9C,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,SAAS,UAAX,EAAR,EAArB;AACD,GAtCY;AAuCb,oBAvCa,2BAuCM,MAvCN,EAuCc,YAvCd,EAuC4B;AACvC,UAAM,MAAN,EAAc,MAAd;AACA,UAAM,YAAN,EAAoB,OAApB;;AAEA,QAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;;;AAGA,QAAI,KAAK,KAAL,KAAe,KAAK,MAAxB,EAAgC;AAC9B,YAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,UAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,WAAS,YAAX,EAAR,EAArB;AACD;AAnDY,CAAf,+E;;;;;;;;;;;ACnBA,OAAO,yBAAP,+C","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n}\n\nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n\n    // Make sure the user is logged in before inserting a task\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: this.userId,\n      username: Meteor.users.findOne(this.userId).username,\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n\n    const task = Tasks.findOne(taskId);\n\n    // Make sure only the task owner can make a task private\n    if (task.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  },\n});\n","import '../imports/api/tasks.js';\n"]}